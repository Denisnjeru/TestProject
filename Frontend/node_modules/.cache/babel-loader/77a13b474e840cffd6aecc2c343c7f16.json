{"remainingRequest":"/Users/user/Documents/TestProject/Frontend/node_modules/babel-loader/lib/index.js!/Users/user/Documents/TestProject/Frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/user/Documents/TestProject/Frontend/src/store/modules/routing.store.js","dependencies":[{"path":"/Users/user/Documents/TestProject/Frontend/src/store/modules/routing.store.js","mtime":1647724083216},{"path":"/Users/user/Documents/TestProject/Frontend/babel.config.js","mtime":1647724083201},{"path":"/Users/user/Documents/TestProject/Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/Documents/TestProject/Frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/user/Documents/TestProject/Frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// import Utils from '../../utils/Cookies';\nvar initialState = function initialState() {\n  return {\n    conditions: [],\n    expressions: [],\n    types: [],\n    actions: []\n  };\n}; // const state = initialState();\n\n\nvar state = {\n  conditions: [{\n    'id': 1,\n    'name': 'Req: Total'\n  }, {\n    'id': 2,\n    'name': 'Req: Department'\n  }],\n  expressions: [{\n    'id': 1,\n    'name': '='\n  }, {\n    'id': 2,\n    'name': '<'\n  }, {\n    'id': 3,\n    'name': '>'\n  }],\n  types: [{\n    'id': 1,\n    'name': 'IF'\n  }, {\n    'id': 2,\n    'name': 'AND'\n  }, {\n    'id': 3,\n    'name': 'OR'\n  }, {\n    'id': 4,\n    'name': 'ELSE'\n  }],\n  actions: [{\n    'id': 1,\n    'name': 'Route to User'\n  }, {\n    'id': 2,\n    'name': 'Route to Path'\n  }]\n};\nvar getters = {\n  allConditions: function allConditions(state) {\n    return state.conditions;\n  },\n  allExpressions: function allExpressions(state) {\n    return state.expressions;\n  },\n  allTypes: function allTypes(state) {\n    return state.types;\n  },\n  allActions: function allActions(state) {\n    return state.actions;\n  }\n};\nvar mutations = {};\nvar actions = {};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["/Users/user/Documents/TestProject/Frontend/src/store/modules/routing.store.js"],"names":["initialState","conditions","expressions","types","actions","state","getters","allConditions","allExpressions","allTypes","allActions","mutations","namespaced"],"mappings":"AAAA;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAO;AACxBC,IAAAA,UAAU,EAAE,EADY;AAExBC,IAAAA,WAAW,EAAE,EAFW;AAGxBC,IAAAA,KAAK,EAAE,EAHiB;AAIxBC,IAAAA,OAAO,EAAE;AAJe,GAAP;AAAA,CAArB,C,CAOA;;;AAEA,IAAMC,KAAK,GAAG;AACVJ,EAAAA,UAAU,EAAE,CACR;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GADQ,EAER;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GAFQ,CADF;AAKVC,EAAAA,WAAW,EAAE,CACT;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GADS,EAET;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GAFS,EAGT;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GAHS,CALH;AAUVC,EAAAA,KAAK,EAAE,CACH;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GADG,EAEH;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GAFG,EAGH;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GAHG,EAIH;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GAJG,CAVG;AAgBVC,EAAAA,OAAO,EAAE,CACL;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GADK,EAEL;AAAE,UAAM,CAAR;AAAW,YAAQ;AAAnB,GAFK;AAhBC,CAAd;AAsBA,IAAME,OAAO,GAAG;AACZC,EAAAA,aADY,yBACGF,KADH,EACU;AAClB,WAAOA,KAAK,CAACJ,UAAb;AACH,GAHW;AAIZO,EAAAA,cAJY,0BAIIH,KAJJ,EAIW;AACnB,WAAOA,KAAK,CAACH,WAAb;AACH,GANW;AAOZO,EAAAA,QAPY,oBAOFJ,KAPE,EAOK;AACb,WAAOA,KAAK,CAACF,KAAb;AACH,GATW;AAUZO,EAAAA,UAVY,sBAUAL,KAVA,EAUO;AACf,WAAOA,KAAK,CAACD,OAAb;AACH;AAZW,CAAhB;AAeA,IAAMO,SAAS,GAAG,EAAlB;AAIA,IAAMP,OAAO,GAAG,EAAhB;AAIA,eAAe;AACXQ,EAAAA,UAAU,EAAE,IADD;AAEXP,EAAAA,KAAK,EAALA,KAFW;AAGXC,EAAAA,OAAO,EAAPA,OAHW;AAIXF,EAAAA,OAAO,EAAPA,OAJW;AAKXO,EAAAA,SAAS,EAATA;AALW,CAAf","sourcesContent":["// import Utils from '../../utils/Cookies';\n\nconst initialState = () => ({\n    conditions: [],\n    expressions: [],\n    types: [],\n    actions: []\n});\n\n// const state = initialState();\n\nconst state = {\n    conditions: [\n        { 'id': 1, 'name': 'Req: Total' },\n        { 'id': 2, 'name': 'Req: Department' },\n    ],\n    expressions: [\n        { 'id': 1, 'name': '=' },\n        { 'id': 2, 'name': '<' },\n        { 'id': 3, 'name': '>' },\n    ],\n    types: [\n        { 'id': 1, 'name': 'IF' },\n        { 'id': 2, 'name': 'AND' },\n        { 'id': 3, 'name': 'OR' },\n        { 'id': 4, 'name': 'ELSE' },\n    ],\n    actions: [\n        { 'id': 1, 'name': 'Route to User' },\n        { 'id': 2, 'name': 'Route to Path' },\n    ],\n}\n\nconst getters = {\n    allConditions (state) {\n        return state.conditions\n    },\n    allExpressions (state) {\n        return state.expressions\n    },\n    allTypes (state) {\n        return state.types\n    },\n    allActions (state) {\n        return state.actions\n    },\n}\n\nconst mutations = {\n\n}\n\nconst actions = {\n\n}\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    actions,\n    mutations\n}\n"]}]}